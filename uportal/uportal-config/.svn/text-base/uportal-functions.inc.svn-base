<?


$uname = 'guest';

if (isset($_SERVER['PHP_AUTH_USER'])) {
	$uname = $_SERVER['PHP_AUTH_USER'];

} 
else if( isset( $_SERVER['SSL_CLIENT_S_DN'] ) ) {
	$uname = $_SERVER['SSL_CLIENT_S_DN'];
}

$dbconn = pg_connect($UP_conn_string);

if( !isset( $uname ) ) {
	echo "<p>No credentials provided";
	die_now();
}

if( ($dbconn)==NULL ) {
	echo "<p>Unable to connect to database";
	die_now();
}

$uid = get_uid( $dbconn, $uname );

if( $uid == NULL && !isset( $register ) ) {
		register_form( $uname );
	die;
}


function add_user($dbconn,  $dn ) {
	$query = "INSERT INTO users ( username ) values ( '" . sanify($dn) . "')";
//echo $query;
	$result = pg_query( $dbconn, $query );

	$query = "SELECT userid FROM users where username = '".sanify($dn)."'";
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	$userid = $arr['userid'];
	
	$query ="SELECT * from app_list WHERE default_allow = true";
	$result = pg_query( $dbconn, $query );

	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	while( $arr!=NULL ) {
		$q2 = "INSERT INTO acl ( userid, app_id ) VALUES ( ".$userid.", ". $arr['app_id'] .")";
		pg_query( $dbconn,  $q2 );
		$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	}

}

function register_form( $uname ) {
	echo "<H2>U-Portal Registration</h2>";

	
	echo "You have been authenticated (". $uname. ") but have not registered for the portal. To do so, please click <a href=\"register.php\">here</a>.";

	die;
}

//echo $UP_ssh;
//echo "</br>";
//make_staging_directory( $dbconn, 0 );


function owns_job( $dbconn, $uid, $jid ) {
	$query = "SELECT * FROM job_list WHERE userid = ".$uid." AND job_id = ".$jid;
	$result = pg_query( $dconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( $arr != NULL ) { return true; }
	else  { return false; }
}

function delete_file( $dbconn, $uid, $jid ) {
	
}

function new_job_list( $dbconn, $uid ) {
	$query="select * from app_list a  join acl b on a.app_id = b.app_id and b.userid=" .sanify($uid);


	$result = pg_query( $dbconn, $query );

	
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	
	if($arr!=NULL ) {

		echo "<P>Select application type from the list below</BR>";

		echo '<FORM method="POST" action="newJob.php" enctype="multipart/form-data">';
		echo '<SELECT NAME="application">';
		while( $arr!=NULL ) {

			echo '<option value="'. $arr['app_name'] .'">'. $arr['app_name'] .'</option>';
			$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

		}
		echo '</SELECT>';
		echo '<INPUT TYPE="SUBMIT" value="Create">';
		echo '</FORM>';
	}
}


function get_uid ( $dbconn,  $uname ) {
	$query = 'SELECT userid FROM users WHERE username ~* \'' . sanify($uname) .'\'' ;
	$result  = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	return $arr[ 'userid' ];
}

function get_jobs( $dbconn, $uid ) {
	$query = 'SELECT job_list FROM users WHERE userid = ' . sanify($uid). ' ORDER BY job_id DESC' ;
	$result  = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	return $arr;

}

function list_jobs( $dbconn, $uid , $order, $orderdir=0) {
	$statidx = array ('I' => 'Pending', 'R' => 'Running', 'C' => 'Finished', 'X' => 'Deleted', 'U'=>'Pending', 'H' => 'Paused', '?' => 'Not Queued', '!' => 'Failed' );

	$orderby = array ( 'job_id' , 'a.app_id' , 'submit_time', 'wall_time',  'status' );
	
	if( $orderdir==1 ) { $orderdirstr='ASC';$otherdir=0; }
	else { $orderdirstr='DESC'; $otherdir=1; };
	
	if( $order >=0 && $order < count($orderby ) ) { $orderbystr = $orderby[$order]; }
	else { $orderbystr = $orderby[0]; }


	$uid = sanify ( $uid );

	$query = "SELECT * FROM job_list a, app_list b WHERE userid = " . $uid . " AND deleted=false and a.app_id = b.app_id ORDER BY ".$orderbystr. " ".  $orderdirstr ;
	$result  = pg_query( $dbconn, $query );


	echo "<TABLE WIDTH=100% BORDER=1>";


//	echo '<FORM method="put" action="deleteJob.php">';
	
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	if( $arr != NULL ) {
	echo "<TR>";
	echo "<TD><A HREF=\"?orderby=0&orderdir=$otherdir\"><B>Job ID</A></TD>";
	echo "<TD><A HREF=\"?orderby=1&orderdir=$otherdir\"><B>Application</A></TD>";
	print "<TD><B>Description</TD>";
	echo "<TD><A HREF=\"?orderby=2&orderdir=$otherdir\"><B>Submission Time</A></TD>";
	echo "<TD><A HREF=\"?orderby=3&orderdir=$otherdir\"><B>Wall Time</A></TD>";
	echo "<TD><A HREF=\"?orderby=4&orderdir=$otherdir\"><B>Status</A></TD>";
	print "<TD><B>Input files</TD>";
	print "<TD><B>Output files</TD>";
	print "<TD><B>Published</TD>";
	print "<TD><B>Delete</TD>";
	echo "</TR>";


//echo $query;

	while( $arr != NULL ) {
		$is_complete=0;

                # Get job status, updating from server if necessary
		$jid =  $arr[ 'job_id' ];
		$stat = get_job_status( $dbconn, $arr['staging_dir'], $jid );
		echo "<TR>";

		
			echo "<TD>";
			echo $jid;
			echo "</TD>";

			echo "<TD>";
			echo $arr[ 'app_name' ];
			echo "</TD>";

			echo "<TD>";
			echo $arr[ 'description' ];
			echo "</TD>";

			echo "<TD>";
			$time_submit  = $arr['submit_time'];

			# Remove the decimal at the end of the time string

			$time_submit = preg_replace( "/\..*$/", "", $time_submit );

			print $time_submit;
#			echo $arr[ 'submit_time' ];
			echo "</TD>";

      print "<TD>";
			$wall_time  = $arr['wall_time'];
		  if( $wall_time == -1 ) {
				print "Not reported";
			}
			else if( $wall_time <1 ) {
				print "--";
			}
			else {
				$hr = (int)($wall_time/3600);
				$min = (int) (($wall_time - ($hr)*3600 )/60);
				$sec = $wall_time - $hr*3600 - $min*60;
			  print $hr .":".$min.":".$sec;
			}
			print "</TD>";
	
			echo "<TD>";
			//$stat =  $status[$arr[ 'status' ]];
			//echo $stat;

					echo "<TABLE><TR><TD>".$statidx[$stat[0]]."</TD></TR>";
					echo "<TR><TD>".$stat[1]."</TD></TR></TABLE>";
			echo "</TD>";

			echo "<TD>";
			list_input_files( $dbconn, $jid, $arr['app_id'] );
			echo "</TD>";

			echo "<TD>";
			if( $stat[0] == 'C' ) {
				list_output_files( $dbconn, $jid, $arr['app_id'] , false );
				$is_complete=1;
			}
			else if ($stat[0] == 'R' ) {
				list_output_files( $dbconn, $jid, $arr['app_id'] , true );
			}
			else {
			}
			echo "</TD>";

			echo "<TD>";
			if( $is_complete==1 ) {
				if( is_publishable( $dbconn, $arr['app_id'], $jid ) ) {
					echo '<a href="publish.php?jid='.$jid.'">Publish to DSpace</a>';
				}
				else if( is_published( $dbconn, $jid ) ){
					echo '<A href="' . get_dspace_url( $dbconn, $jid ) . '">Published</a>';
				}
			}
			echo "</TD>";

			echo "<TD>";
			echo '<A HREF="deleteJob.php?jid='.$arr['job_id'].'">Delete</a>';
			echo "</TD>";

		echo "</TR>\n";
		
		$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	}

	echo "</TABLE>";
	}
	else {
		echo "You have no jobs</br>";
	}
//	echo '<INPUT TYPE="SUBMIT" value="Delete" >';
//	echo "</FORM>";



}

function list_input_files( $dbconn, $jid, $app_type ) {
	$result = pg_query( $dbconn, 'SELECT * FROM app_input WHERE app_id = ' .$app_type . ' ORDER BY index ASC' );



	$count=0;


	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	if( $arr!=NULL ) {	
	print "<FORM METHOD=\"GET\" ACTION=\"getInputFile.php\"><SELECT NAME=\"idx\">\n";
	while( $arr != NULL ) {
			
		print "<OPTION VALUE=\"".$count."\"";
		if ($count==0 ) { print "SELECTED=\"1\"";}
		print ">" . $arr['description']."\n";
		$count++;
		$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	}
	
	print "</SELECT><INPUT TYPE=\"HIDDEN\" NAME=\"jid\" VALUE=\"".$jid."\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Download\"></FORM>";

	}

/*
	echo "<TABLE>\n";

	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	while( $arr != NULL ) {

		echo "<TR><TD>";
		echo '<a href="getInputFile.php?jid='. $jid . '&idx='. $arr['index'].'">'. $arr['description'].'</a>';
		echo "</TD></TR>";

		$count++;
		$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	}

		if($count>1) {
			echo "<TR><TD>";
			echo '<a href="getInputFile.php?jid='. $jid . '">Tar</a>';
			echo "</TD></TR>";
		}

		echo "</TABLE>\n";
*/
}

function list_output_files( $dbconn, $jid , $app_type , $is_running) {
	if( $is_running ) {

		$result = pg_query( $dbconn, 'SELECT * FROM app_output WHERE app_id = ' .$app_type . ' AND available_at_runtime=true ORDER BY index ASC' );
	}
	else {
		$result = pg_query( $dbconn, 'SELECT * FROM app_output WHERE app_id = ' .$app_type . ' ORDER BY index ASC' );
	}

	$count=0;


	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	if( $arr!=NULL ) {	
	print "<FORM METHOD=\"GET\" ACTION=\"getOutputFile.php\"><SELECT NAME=\"idx\">\n";
	while( $arr != NULL ) {
			
		print "<OPTION VALUE=\"".$count."\"";
		if ($count==0 ) { print "SELECTED=\"1\"";}
		print ">" . $arr['description']."\n";
		$count++;
		$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	}
	
	if( $count!=0 ) {
		print "<OPTION VALUE=\"-1\">Tarball\n";
	}
	print "</SELECT><INPUT TYPE=\"HIDDEN\" NAME=\"jid\" VALUE=\"".$jid."\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Download\"></FORM>";

	}

/*
	$count = 0;

	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	while( $arr != NULL ) {

	
		echo "<TR><TD>";
		echo '<a href="getOutputFile.php?jid='. $jid . '&idx='. $arr['index'].'">'. $arr['description'].'</a>';
		echo "</TD></TR>";

		$count++;
		$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	}

		if($count>1) {
			echo "<TR><TD>";
			echo '<a href="getOutputFile.php?jid='. $jid . '">Tar</a>';
			echo "</TD></TR>";
		}

		echo "</TABLE>\n";
*/

}

function sanify(  $a ) {

$search = array ('@<script[^>]*?>.*?</script>@si', // Strip out javascript
                 '@<[\/\!]*?[^<>]*?>@si',          // Strip out HTML tags
                 '@([\r\n])[\s]+@',                // Strip out white space
                 '@&(quot|#34);@i',                // Replace HTML entities
                 '@&(amp|#38);@i',
                 '@&(lt|#60);@i',
                 '@&(gt|#62);@i',
                 '@&(nbsp|#160);@i',
                 '@&(iexcl|#161);@i',
                 '@&(cent|#162);@i',
                 '@&(pound|#163);@i',
                 '@&(copy|#169);@i',
                 '@&#(\d+);@e');                    // evaluate as php

$replace = array ('',
                 '',
                 '\1',
                 '"',
                 '&',
                 '<',
                 '>',
                 ' ',
                 chr(161),
                 chr(162),
                 chr(163),
                 chr(169),
                 'chr(\1)');

	$text = preg_replace($search, $replace, $a);
	$text =  htmlentities( $text, ENT_QUOTES );
return $text;
}

function make_staging_directory( $dbconn, $app_id ) {
	global $UP_ssh;
	global $UP_ssh_key;
	global $UP_ssh_keydir;
	global $UP_make_staging_directory;
	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );


	$cmd = $UP_ssh . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@'.$app_host. '.id_rsa';
	$cmd = $cmd . ' '. $app_user .'@' . $app_host;
	$cmd = $cmd . ' '. $UP_make_staging_directory;

#echo $cmd;

	$output = array();

	exec  ($cmd, $output );

#echo $output[0];

	if( isset ($output[0]) ) {
		return $output[0];
	}
	else {
		echo "Unable to start job";
		die_now();
	}
}

function get_job_status( $dbconn, $staging_dir, $job_id ) {
	$query  = " SELECT status, substatus, app_id FROM job_list WHERE job_id = " . sanify( $job_id );
	$result = pg_query( $dbconn, $query );
	$arr    = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	$app_id = $arr[ 'app_id' ];

#echo "STATUS:: [".$arr['status']."]";

	if( $arr['status'] == 'C' ) {
		$ret = array ( 0=> $arr['status'], 1=> $arr['substatus'] );
		return $ret;
	}
	else {
		// fetch updated state
		global $UP_ssh;
		global $UP_scp;
		global $UP_ssh_key;
		global $UP_ssh_keydir;
		global $UP_job_status;

	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );

	$cmd = $UP_ssh . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@'. $app_host. '.id_rsa' . ' '. $app_user.'@'.$app_host;
	$cmd = $cmd . ' ' . $UP_job_status . ' '. $staging_dir;

	$output = array ();
	
#print $cmd."</BR>";	
	exec( $cmd, $output );

#echo "</br>";
#echo $cmd;
#echo "</br>";
#print_r( $output );
#echo "</br>";
	// stupid indexing

	$query = "UPDATE job_list SET status= '".sanify($output[0])."' , substatus='". sanify($output[1]) ."' WHERE job_id = " . $job_id;

#echo $query."</BR>";

	pg_query( $dbconn, $query );

	$wt=-1;
	foreach( $output as $t ) {
		if ( strstr($t, "Walltime" ) ) {
			$ar = explode( ":", $t );
			if( $ar[1]>0 ) {
				$wt=$ar[1];
			}		
		}
	}

				$query = "UPDATE job_list SET wall_time = $wt WHERE job_id = ". $job_id;
		    $result =  pg_query( $dbconn, $query );

	return $output;
	}
	
}

function copy_file_to_staging_directory( $dbconn, $app_id, $staging_dir, $file, $input_index ) {
	global $UP_ssh;
	global $UP_scp;
	global $UP_ssh_key;
	global $UP_ssh_keydir;
	global $UP_make_staging_directory;
	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );


	$cmd = $UP_scp . ' -v  '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@'.$app_host.'.id_rsa';
	$cmd = $cmd . ' ' . $file . ' '. $app_user .'@' . $app_host . ':'.$staging_dir. '/input-' . $input_index;

	$output = array ();

#echo "</br>";
#echo $cmd;
#echo "</br>";


	exec( $cmd, $output );
#print_r($output );
	
	
}

function get_app_script( $dbconn, $app_id ) {
	$query = 'SELECT app_script FROM app_list WHERE app_id = ' . $app_id;
	$result =  pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( $arr != NULL ) {
		return $arr['app_script'];
	}
	else { return NULL; }
}


function get_app_user( $dbconn, $app_id ) {
	$query = 'SELECT remote_host, remote_user FROM app_list WHERE app_id = ' . $app_id;
	$result =  pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( $arr != NULL ) {
		return $arr['remote_user'];
	}
	else { return NULL; }
}

function get_app_host( $dbconn, $app_id ) {
	$query = 'SELECT remote_host, remote_user FROM app_list WHERE app_id = ' . $app_id;
	$result =  pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( $arr != NULL ) {
		return $arr['remote_host'];
	}
	else { return NULL; }
}


function get_app_dspace_collection( $app_id ) {
	$app_id = sanify( $app_id );

	$query = "SELECT dspace_collection FROM app_list WHERE app_id  = '". $app_id . "'";
	$result = pg_query( $query );
	$arr =pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( isset( $arr['dspace_collection'] )) { return $arr['dspace_collection']; } else { return NULL; }
}

function get_app_name( $app_id ) {
	$app_id = sanify( $app_id );

	$query = "SELECT app_name FROM app_list WHERE app_id  = '". $app_id . "'";
	$result = pg_query( $query );
	$arr =pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( isset( $arr['app_name'] )) { return $arr['app_name']; } else { return NULL; }
}

function get_app_id_for_job( $job_id ) {
	
	$job_id = sanify($job_id);

	$query = "SELECT app_id FROM job_list WHERE job_id  = '". $job_id . "'";
	$result = pg_query( $query );
	$arr =pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( isset( $arr['app_id'] )) { return $arr['app_id']; } else { return NULL; }
}


function get_app_id( $app_name ) {
	
	$app_name = sanify($app_name);

	$query = "SELECT app_id FROM app_list WHERE app_name  = '". $app_name . "'";
	$result = pg_query( $query );
	$arr =pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( isset( $arr['app_id'] )) { return $arr['app_id']; } else { return NULL; }
}

function validate_app_type( $uid, $app_id ) {
	$uid = sanify( $uid );
	$app_id = sanify( $app_id );
	$query = 'SELECT * FROM app_list a, acl b WHERE  a.app_id = '. $app_id.' AND (( a.app_id = b.app_id AND  userid = '.$uid.' ))';

	$result = pg_query( $query );
	$arr =pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	if( isset( $arr['app_id'] )) { return true; } else { return false;  }
}

function get_app_memory_requirement( $dbconn, $app_id ) {
	$query = "SELECT memory_requirement from app_list where app_id=".$app_id;
	$results = pg_query( $query );
	$arr = pg_fetch_array( $results,  NULL, PGSQL_ASSOC );
	return $arr['memory_requirement'];
}

function get_app_input_file_count( $dbconn, $app_id ) {
	$query = "SELECT count(index) from app_input where app_id=".$app_id;
	$results = pg_query( $query );
	$arr = pg_fetch_array( $results,  NULL, PGSQL_ASSOC );
	return $arr['count'];
}

function get_app_output_file_count( $dbconn, $app_id ) {
	$query = "SELECT count(index) from app_output where app_id=".$app_id;
	$results = pg_query( $query );
	$arr = pg_fetch_array( $results,  NULL, PGSQL_ASSOC );
	return $arr['count'];
}

function make_input_file_form( $app_id, $app_name ) {
	$query = "SELECT * FROM app_input WHERE app_id = ".sanify($app_id). " ORDER BY index ASC ";
	$results = pg_query( $query );
	$arr = pg_fetch_array( $results, NULL, PGSQL_ASSOC );

	echo '<FORM enctype="multipart/form-data"  METHOD="POST" ACTION="newJob.php">';


	echo "<h3>Job Description</h3>";

	echo '<TEXTAREA cols="40" rows="1" NAME="description"></TEXTAREA>';

	echo "<h3>Input files</h3>";

	echo "<TABLE>";

	while( isset ($arr['index'] ) ) {
		echo '<TR><TD>';
		echo $arr['description'];
		echo "</TD><TD>";
//		echo '    <input type="hidden" name="MAX_FILE_SIZE" value="30000" />';
		echo '<INPUT TYPE="FILE" NAME="input-'. $arr['index'] .'"/>';
		echo "</TD></TR>";
		$arr = pg_fetch_array( $results, NULL, PGSQL_ASSOC );
	}
	echo "</TABLE>";
	echo '<INPUT TYPE="HIDDEN" NAME="application" VALUE = "' . sanify( $app_name ) . '"/>';
	echo '<INPUT TYPE="SUBMIT" VALUE = "Submit"/>';
	echo '</FORM>';
}

function register_job_details( $dbconn, $app_id, $userid, $description, $staging_dir ) {
	$query = "SELECT nextval('job_seq_id' )";
	$result = pg_query(	$dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	$jid = $arr['nextval'];
	
	$query = "INSERT INTO job_list ( job_id, app_id, userid,  description, staging_dir, is_published ) VALUES (" . $jid  . ", " . $app_id . ", " . $userid . ",  '" . sanify($description) . "' , '" . sanify( $staging_dir) . "', false )";


	pg_query( $query );

	return $jid;
}

function check_job_owner( $dbconn, $uid, $jid ) {
	$query =" SELECT count(*) FROM job_list WHERE job_id=".sanify( $jid ). " AND userid = " . sanify($uid) ;
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	if( $arr['count'] > 0 ) { return true; } else { return false; }
}

function return_job_output_file( $dbconn, $jid, $idx ) {
	$query ="SELECT * FROM job_list WHERE job_id = " . sanify( $jid );
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	$staging_dir = $arr['staging_dir' ];

	$app_id = $arr['app_id'];

	$query = "SELECT * FROM app_output WHERE app_id = ".$app_id." AND index = " . sanify( $idx);
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	if( !isset( $arr['app_id'] ) ) {
		echo "No such output file";
		die_now();
	}

	global $UP_ssh;
	global $UP_ssh_key;
	global $UP_ssh_keydir;
	global $UP_make_staging_directory;
	global $UP_make_input_tar;
	global $UP_cat;
	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );

	if( !$arr['available_at_runtime'] ) {
		// check to see if the file exists and is > 0 bytes long
		// for files available at runtime, it's permissible to return a zero byte file
		
		$cmd = $UP_ssh . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@'. $app_host. '.id_rsa' . ' '. $app_user.'@'.$app_host;
		$cmd = $cmd . ' ' . $UP_filetest . ' '. $staging_dir.'/output-'. $idx;

		exec( $cmd, $output );
		if( $output[0] == "0" ) {
			# return a 403
			header("HTTP/1.0 404 Not Found");
			return;
		}
	}

	$cmd = $UP_ssh . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@'. $app_host. '.id_rsa' . ' '. $app_user.'@'.$app_host;
	$cmd = $cmd . ' ' . $UP_cat . ' '. $staging_dir.'/output-'. $idx;


	$filename = $arr['filename'];

	# Perform a simple substitution of occurances of '{ID}' with the job id
	$filename = str_replace( "{ID}", $jid, $filename );

	header('Content-Type: "'.$arr['mimetype'].'"');
	header('Content-disposition: attachment; filename="'.$filename.'"' );
	passthru( $cmd );


}



function copy_job_file( $dbconn, $jid, $file, $staging_file ) {
	$query ="SELECT staging_dir, app_id FROM job_list WHERE job_id = " . sanify( $jid );
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	$staging_dir = $arr['staging_dir' ];

	$app_id = $arr['app_id'];

	global $UP_scp;
	global $UP_ssh_key;
	global $UP_ssh_keydir;
	global $UP_make_staging_directory;
	global $UP_make_input_tar;
	global $UP_cat;
	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );


	//copy the remote file $file to the staging_file

	$cmd = $UP_scp . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@'. $app_host. '.id_rsa' . ' '. $app_user.'@'.$app_host;
	$cmd = $cmd . ':"' . $staging_dir.'/'.$file. '" "'.$staging_file.'"';


	exec( $cmd, $output );

//	print $cmd;
//	print ("<BR><BR>");
//	print_r( $output );


}

function return_job_input_file( $dbconn, $jid, $idx ) {
	$query ="SELECT staging_dir, app_id FROM job_list WHERE job_id = " . sanify( $jid );
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	$staging_dir = $arr['staging_dir' ];

	$app_id = $arr['app_id'];

	$query = "SELECT * FROM input_file WHERE job_id = ".sanify($jid)." AND index = " . sanify( $idx);
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	if( !isset( $arr['job_id']) ) {
		echo "No such input file";
		die_now();
	}

	global $UP_ssh;
	global $UP_ssh_key;
	global $UP_ssh_keydir;
	global $UP_make_staging_directory;
	global $UP_make_input_tar;
	global $UP_cat;
	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );


	// call the tar script

	$cmd = $UP_ssh . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@'. $app_host. '.id_rsa' . ' '. $app_user.'@'.$app_host;
	$cmd = $cmd . ' ' . $UP_cat . ' '. $staging_dir.'/input-'. $idx;


	header('Content-Type: "'.$arr['mimetype'].'"');
	header('Content-disposition: attachment; filename="'.$arr['filename'].'"' );
	passthru( $cmd );


}

function return_job_tar_file( $dbconn, $jid  ) {
	$query ="SELECT staging_dir, app_id FROM job_list WHERE job_id = " . sanify( $jid );
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	$staging_dir = $arr['staging_dir' ];

	$app_id = $arr['app_id'];

	global $UP_ssh;
	global $UP_ssh_key;
	global $UP_ssh_keydir;
	global $UP_make_staging_directory;
	global $UP_make_input_tar;
	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );


	// call the tar script

	$cmd = $UP_ssh . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@' .$app_host. '.id_rsa' . ' '. $app_user.'@'.$app_host;
	$cmd = $cmd . ' ' . $UP_make_input_tar . ' '. $staging_dir ;


	header("Content-Type: application/x-gzip");
	header("Content-disposition: attachment; filename=\"output_".$jid.".tar.gz\"");
	passthru( $cmd );


}

function record_input_type( $dbconn, $job_id, $name, $mime_type, $index ) {
	$query ="INSERT INTO input_file ( job_id, filename, mimetype, index ) VALUES (" . sanify($job_id) . ", '" . sanify($name) ."', '".$mime_type."', " . sanify( $index ) . ")";
	echo "</br>";
	//echo $query;
	$result = pg_query( $dbconn, $query );
}

function execute_job( $dbconn, $job_id, $app_id, $app, $staging_dir ) {
	$job_id = sanify( $job_id );
	$app    = sanify( $app );
	$staging_dir    = sanify( $staging_dir );


	$input_file_count=1;
	$output_file_count=4;
	$memory_requirement=1000;	

	global $UP_ssh;
	global $UP_ssh_key;
	global $UP_ssh_keydir;
	global $UP_delete_job;
	global $UP_run_job;
	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );

	$app_script = get_app_script( $dbconn, $app_id );

	$input_file_count  = get_app_input_file_count ( $dbconn, $app_id );
	$output_file_count = get_app_output_file_count( $dbconn, $app_id );
	$memory_requirement = get_app_memory_requirement( $dbconn, $app_id );
		
	$cmd = $UP_ssh . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@' .$app_host. '.id_rsa';
	$cmd = $cmd . ' '. $app_user .'@' . $app_host;
	$cmd = $cmd . ' '. $UP_run_job . ' '. $staging_dir . ' ' . $input_file_count . ' ' . $output_file_count . ' "' . $app_script .'" '. $memory_requirement ;

#echo $cmd;
	exec  ($cmd, $output );
#print"</BR>";
#echo $output[0];

}


function delete_job( $dbconn, $job_id ) {
	$job_id =sanify( $job_id );

	$query = "SELECT count(*) FROM job_list WHERE job_id = ".$job_id ." AND deleted = false";
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	if( $arr['count']==0 ) { 
		echo "No job to delete";
		die_now();
	}

	$query = "UPDATE job_list SET deleted= true WHERE job_id = " .$job_id . " AND deleted=false";
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	$query = "SELECT * FROM job_list WHERE job_id = " . sanify( $job_id );
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );
	$app_id = $arr['app_id'];
	$staging_dir = $arr['staging_dir'];



#	$batch_id = $arr['batch_id'];
#	$app_id = $arr[ 'app_id' ];
#	$staging_dir = $arr[ 'staging_dir' ];
#	
#	if(!isset($batch_id)) {
#		echo "Cannot find remote job id";
#		$batch_id = -1;
#		die_now();
#	}

	global $UP_ssh;
	global $UP_ssh_key;
	global $UP_ssh_keydir;
	global $UP_delete_job;
	$app_user = get_app_user( $dbconn, $app_id );
	$app_host = get_app_host( $dbconn, $app_id );


	
	$cmd = $UP_ssh . ' '. $UP_ssh_key . ' '. $UP_ssh_keydir.'/'. $app_user . '@' .$app_host. '.id_rsa';
	$cmd = $cmd . ' '. $app_user .'@' . $app_host;
	$cmd = $cmd . ' '. $UP_delete_job . ' '. $staging_dir;

//echo $cmd;
	exec  ($cmd, $output );



}

function die_now() {
	echo '<p><a href="index.php">Back</a>';
	die;
}

function apps_to_edit_table( $dbconn ) {

	$query = "Select app_name from app_list";
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

	
	if($arr!=NULL ) {

		echo "<P>Select application type from the list below</BR>";

		echo '<FORM method="POST" action="editApplication.php" enctype="multipart/form-data">';
		echo '<SELECT NAME="application">';
		while( $arr!=NULL ) {

			echo '<option value="'. $arr['app_name'] .'">'. $arr['app_name'] .'</option>';
			$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );

		}
		echo '</SELECT>';
		echo '<INPUT TYPE="SUBMIT" value="Edit">';
		echo '</FORM>';
	}

			
}

function app_edit_form( $dbconn, $appid ) {
	$appid = sanify( $appid );
	$application = get_app_name( $appid );

	$query  = "Select * from app_list where app_id = ". $appid;
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC ); 

	$query  = "Select * from app_input where app_id = ". $appid . "ORDER BY index ASC";
	$result = pg_query( $dbconn, $query );
	$input_arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC ); 

	$query  = "Select * from app_output where app_id = ". $appid . "ORDER BY index ASC";
	$result = pg_query( $dbconn, $query );
	$output_arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC ); 

	echo '<FORM method="POST" action="editApplication.php" enctype="multipart/form-data">';
	

	# Input files 
	echo "<TABLE>";
	echo "<TR><TD>File</TD><TD>Description</TD></TR>";
	while( $input_arr!= NULL ) {

		echo "<TR>";
		$i    = $input_arr['index'];
		$text = $input_arr['description'];
		echo '<TD>'. ($i+1).' </TD><TD><input type="text" name="input-'.$i.'" value="' .$text. '"></TD>';

		$input_arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC ); 
	}
		echo '<TR><TD>Add '. ($i+2).' </TD><TD><input type="text" name="input-'.($i+1).'" value=""></TD></TR>';

	echo "</TABLE>";

	echo '<INPUT TYPE="HIDDEN" name="application" value="' . $application . '">';
  	echo '<INPUT TYPE="SUBMIT" value="Update">';

   echo '</FORM>';

}

function is_published( $dbconn, $jid ) {
		$jid = sanify($jid );
			$query  = "SELECT is_published FROM job_list WHERE job_id = ".sanify($jid);
			$result = pg_query( $dbconn, $query );
			$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );



			if( $arr['is_published'] == 't' ) { 
				return true; 
			} else { 
				return false; 
			}
}

function is_publishable( $dbconn, $appid, $jid ) {
	$query="SELECT * FROM app_list where app_id = ".sanify($appid) ;
	$result = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );


	if( $arr != NULL ) {
		if ($arr['publishable'] == 't' ) {

			$query  = "SELECT is_published FROM job_list WHERE job_id = ".sanify($jid);
			$result = pg_query( $dbconn, $query );
			$arr = pg_fetch_array( $result, NULL, PGSQL_ASSOC );


			if( $arr['is_published'] == 'f' ) { 
				return true; 
			} else { 
				return false; 
			}
		}
		else {
			return false;
		}
	}
	else {
		return false;
	}

}

function publish( $dbconn, $jid ) {
	global $UP_dspace_insert;

	$jid = sanify( $jid );
	$appid = get_app_id_for_job ( $jid );

	$description="";

	if( $appid == NULL ) { 
		echo "<P>No such Job";
		die_now(); 
	}
	if ( !is_publishable( $dbconn, $appid, $jid ) ) {
		echo "<P>Job may not be published";
		die_now();
	}

	$collection_id = get_app_dspace_collection( $appid );

	# First we make the temportary dspace staging directory


	exec( "mktemp -d", $result );

	$tmpdirroot = $result[0];
	$tmpdir= $result[0]. '/item_000';

	mkdir ( $tmpdir );

	
	$job_description = ltrim( rtrim( get_job_description( $dbconn, $jid ) ) ) ;


	$query = "SELECT * FROM app_input WHERE app_id = ".$appid . " ORDER BY index asc";

	$results= pg_query( $dbconn, $query ) ;
	
	$arr= pg_fetch_array( $results, NULL, PGSQL_ASSOC );
	
	$bitstreams= array();
	$subjects  = array();

	while( $arr!=NULL ) {
		if( ($arr['dspace_subject']) =='t'|| ($arr['dspace_store'])=='t' ) {


			// copy it to the staging directory

			$description = str_replace( ' ', '_', get_job_input_filename( $dbconn, $jid, $arr['index'] ) );
			copy_job_file( $dbconn, $jid, "input-". $arr['index'], $tmpdir.'/'. $description );			

		}

		if(  $arr[ 'dspace_subject' ]=='t' ) {
			// the contents ofthis file are to be published as a subject

			$fin = fopen( $tmpdir.'/'.$description, 'r' );
			while( !feof( $fin ) ) {
				$tag = ltrim( rtrim ( fread( $fin, 128 ) ) );
				if (strlen( $tag ) > 0 ) {
					array_push( $subjects, $tag );
				}
			}	
			fclose( $fin );

#			array_push( $subjects, file_get_contents( $tmpdir.'/'.$description ) );
			
		}
		if(  $arr['dspace_store']=='t' ) {
			// this file is to be attached as a dspace bitstream
			array_push( $bitstreams, $description );
		}

		$arr= pg_fetch_array( $results, NULL, PGSQL_ASSOC );
	}

	$query = "SELECT * FROM app_output WHERE app_id = ".$appid;
	$results= pg_query( $dbconn, $query ) ;
	$arr= pg_fetch_array( $results, NULL, PGSQL_ASSOC );



	while( $arr!=NULL ) {
		if( $arr['dspace_subject']=='t' || $arr['dspace_store']=='t' ) {

			// copy it to the staging directory
			$description = str_replace( ' ', '_', $arr['filename'] );

			copy_job_file( $dbconn, $jid, "output-". $arr['index'], $tmpdir.'/'. $description );			

		}


#echo "<p> ".$arr['description']. " --- " . $arr['dspace_subject']->BooleanType ." --- " . $arr['dspace_store']->BooleanType;

		if( $arr[ 'dspace_subject' ]=='t'   ) {
	
			// the contents ofthis file are to be published as a subject

			$fin = fopen( $tmpdir.'/'.$description, 'r' );
			while( !feof( $fin ) ) {
				$tag = ltrim( rtrim ( fgets( $fin, 128 ) ) );
				if (strlen( $tag ) > 0 ) {
					array_push( $subjects, $tag );
				}
			}	
			fclose( $fin );
			#array_push( $subjects, file_get_contents( $tmpdir.'/'.$description ) );
			
		}
		if( $arr['dspace_store']=='t' )  {
			// this file is to be attached as a dspace bitstream
			array_push( $bitstreams, $description );
		}

		$arr= pg_fetch_array( $results, NULL, PGSQL_ASSOC );
	}


	// write the contents file
	$fout = fopen(  $tmpdir.'/contents', 'w' );
	foreach  ($bitstreams as $value) {
		fwrite( $fout, $value."\n" );
	}
	fclose( $fout );
	
 	// write the dublin core file

	$fout = fopen(  $tmpdir.'/dublin_core.xml', 'w' );
	fwrite( $fout, "<dublin_core>\n" );
	fwrite( $fout, '<dcvalue element="title">'. sanify(get_app_name( $appid )) ."</dcvalue>\n" );

	if( strlen( $job_description ) > 0 ) {
		$job_description = sanify( $job_description );
		fwrite( $fout, '<dcvalue element="subject">'. $job_description ."</dcvalue>\n" );
	}

	foreach  ($subjects as $value) {
		$value = sanify( $value );
		fwrite( $fout, '<dcvalue element="subject">'. $value ."</dcvalue>\n" );
	}


	fwrite( $fout, "</dublin_core>\n" );
	fclose( $fout );

	# Now shell out to the dspace insert tool

	exec ( 'mktemp' , $output );

	$mapfile = $output[0];
	unlink(	$mapfile);

	$cmd = $UP_dspace_insert. ' -c '. $collection_id . ' -s ' . $tmpdirroot . ' -m '. $mapfile;

echo $cmd;
echo "</BR>";
	exec( $cmd, $output ); 
	print_r( $output );
echo "</BR>";

	$mapfile_contents = sanify( file_get_contents( $mapfile ) );

#echo "<p>".$mapfile_contents;

	$query = "UPDATE job_list SET is_published=true, dspace_mapfile = '" . $mapfile_contents . "' WHERE job_id = " . $jid;
	pg_query( $dbconn, $query );

 echo $tmpdirroot;

#	exec( "rm -rf '". $tmpdirroot . "'" );

}

function get_dspace_url( $dbconn, $jid ) {
	global $UP_dspace_url;

	$jid = sanify( $jid );
	$query = "SELECT dspace_mapfile from job_list where job_id = " . $jid;
	$results = pg_query ( $dbconn, $query );
	$arr = pg_fetch_array( $results, NULL, PGSQL_ASSOC );

	$map = $arr['dspace_mapfile'];


	$arr =  explode( " ", $map );


	return $UP_dspace_url. ltrim(rtrim( $arr[1] ) );
}

function	 get_job_description( $dbconn, $jid ) {
	$query = "SELECT description FROM job_list WHERE job_id = " . sanify( $jid);
	$results = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $results, NULL, PGSQL_ASSOC );
	return $arr['description'];
}


function	 get_job_input_filename( $dbconn, $jid, $index ) {
	$query = "SELECT filename FROM input_file WHERE job_id = " . sanify( $jid) . " AND index = " . sanify($index);
	$results = pg_query( $dbconn, $query );
	$arr = pg_fetch_array( $results, NULL, PGSQL_ASSOC );
	return $arr['filename'];
}

function condor_pool_status() {

	global $UP_condor_status;

	$arr = split("\n", file_get_contents( $UP_condor_status ) );

	print "<h2>Condor Pool Status at ". date('l dS \of F Y h:i:s A') ."</h2>";

	print "<TABLE BORDER=1>\n";
	print "<TR><TD><B>Machine</B></TD><TD><B>Status</B></TD></TR></BR>";

	$name= NULL;
	$activity = NULL;
	foreach ( $arr as $t ) {
		if( strlen($t) > 0 ) {

		$t= ereg_replace( '"', '', $t );
		$t = ereg_replace( 'vm[123456789]@', '', $t );
		list( $key, $value ) = split( "=", $t );
		if( $key == "Name ") {
			$name = $value;
			$activity= NULL;
		}
		if( $key == "Activity " && $name!=NULL  ) {
			$activity= $value;

			if ( !strstr( $name , "unixblade7" ) ) {
				if ( strstr( $value, "Busy" ) ) { $col ="Red"; } else {$col="Green"; } 

				print "<TR><TD>$name</TD><TD BGCOLOR=\"$col\" >$value</TD></TR>\n";
			}
			$activity = $name = NULL;
			
		}
		}
	}

	print "</TABLE>\n";
}

?>
